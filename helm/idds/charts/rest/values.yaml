# Default values for main.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: wguanicedew/idds
  pullPolicy: "IfNotPresent"
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.10.18"

# start the service when pod gets started
autoStart: true

iddsServer: localhost

persistentvolume:
  create: true
  class: manual
  path: "/mnt/idds-main-logs"
  size: 5Gi

panda:
  panda_url_ssl: https://panda-dev-server:25443/server/panda
  panda_url: http://panda-dev-server:25080/server/panda
  panda_monitor_url: "https://panda-dev-server"
  panda_auth: "oidc"
  panda_auth_vo: "Rubin:production"
  panda_config_root: "/opt/idds/config/"
  pandacache_url: "https://panda-dev-server:25443/server/panda"
  panda_verify_host: "off"

hostcerts:
  enabled: false

database:
  name: postgresdb
  user: admin
  password: MyPandaPass0508
  schema: public

oidc:
  atlas:
    client_id: abc
    client_secret: abc
  rubin:
    client_id: abc
    client_secret: abc
  rubin_production:
    client_id: abc
    client_secret: abc
  panda_dev:
    client_id: abc
    client_secret: abc

conductor:
  brokers: atlas-mb.cern.ch
  port: 61013
  destination: /topic/doma.idds
  username: username
  password: password

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  httpsPort: 443

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret"
    # nginx.ingress.kubernetes.io/auth-tls-secret: "ca-secret"
    # nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret-bundle"
    nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret-wguan"
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: 'true'
    nginx.ingress.kubernetes.io/auth-tls-verify-client: 'optional'
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: 'on' 
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: 'optional_no_ca'
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: 'off'
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: '10'
    nginx.ingress.kubernetes.io/auth-proxy-set-headers: X-IDDS-Auth-Type,X-IDDS-Auth-VO,X-IDDS-Auth-Token
    nginx.ingress.kubernetes.io/proxy-pass-headers: X-IDDS-Auth-Type,X-IDDS-Auth-VO,X-IDDS-Auth-Token
    nginx.org/proxy-pass-headers: X-IDDS-Auth-Type,X-IDDS-Auth-VO,X-IDDS-Auth-Token
    nginx.ingress.kubernetes.io/configuration-snippet: |-
        proxy_set_header X-IDDS-Auth-Type $http_x_idds_auth_type;
        proxy_set_header X-IDDS-Auth-VO $http_x_idds_auth_vo;
        proxy_set_header X-IDDS-Auth-Token $http_x_idds_auth_token;
        add_header X-IDDS-Auth-Type $http_x_idds_auth_type;
        add_header X-IDDS-Auth-VO $http_x_idds_auth_vo;
        add_header X-IDDS-Auth-Token $http_x_idds_auth_token;
        # proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
        ssl on;
        # ssl_protocols TLSv1.1 TLSv1.2;
        ssl_trusted_certificate /etc/ingress-controller/ssl/ca-default-ca-secret-bundle.pem;
        # ssl_ciphers HIGH:!aNULL:!MD5;
        # ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
  hosts:
    - domain: cern.ch
      hostOverride: ""
      paths:
        - path: /
          pathType: Prefix

  tls:
    - secretName: idds-dev-main-tls-cert
      hosts:
        - domain: cern.ch
          hostOverride: ""
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
