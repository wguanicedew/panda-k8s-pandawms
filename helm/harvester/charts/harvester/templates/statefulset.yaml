# pv
{{- if .Values.persistentvolume.create }}
kind: PersistentVolume
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
      {{- include "harvester.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  capacity:
    storage: {{ .Values.persistentvolume.size }}
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: {{ .Values.persistentvolume.path }}
---
# pv claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
    {{- include "harvester.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.persistentvolume.size }}
  {{- if .Values.persistentvolume.selector }}
  selector:
    matchLabels:
      {{- include "harvester.selectorLabels" . | nindent 6 }}
  {{- end }}
---
{{- end }}
# pv for condor logs
{{- if .Values.persistentvolume.create }}
kind: PersistentVolume
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}-condor-logs
  labels:
      {{- include "harvester.labels-condor-logs" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  capacity:
    storage: {{ .Values.persistentvolume.size }}
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: {{ .Values.persistentvolume.path }}
---
{{- end }}
# pv claim for condor logs
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}-condor-logs
  labels:
    {{- include "harvester.labels-condor-logs" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.persistentvolume.size }}
  {{- if .Values.persistentvolume.selector }}
  selector:
    matchLabels:
      {{- include "harvester.selectorLabels-condor-logs" . | nindent 6 }}
  {{- end }}
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
    {{- include "harvester.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ include "harvester.fullname" . }}
  selector:
    matchLabels:
      {{- include "harvester.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "harvester.selectorLabels" . | nindent 8 }}
    spec:
      hostname:  {{ .Release.Name }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "harvester.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- if .Values.noRoot }}
            # set non-zero GUID to run conder with non-root PID
            runAsGroup: 15678
            {{- if .Values.securityContext }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
            {{- else }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.autoStart }}
          command: ["/bin/sh", "-c"]
          args:
            - if [ ${HARVESTER_DB_HOST} != "localhost" ]; then while ! mysqladmin ping -h ${HARVESTER_DB_HOST} -p${MARIADB_PASSWORD} --silent; do sleep 1; done; fi;
              cp /opt/harvester/sandbox/* /data/harvester/;
              chmod +x /data/harvester/init-harvester;
              chmod +x /data/harvester/run-harvester-crons;
              {{- if .Values.noRoot }}
              /opt/harvester/etc/rc.d/init.d/run-harvester-services;
              {{- else }}
              chmod -R 777 /var/log/panda;
              chmod -R 777 /var/log/condor_logs;
              ln -s /var/log/condor_logs /var/www/html/;
              runuser -u atlpan -g zp -- /opt/harvester/etc/rc.d/init.d/run-harvester-services;
              {{- end }}
              sleep infinity & wait
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "harvester.fullname" . }}-logs
              mountPath: /var/log/panda/
            - name: {{ include "harvester.fullname" . }}-condor-logs
              mountPath: /var/log/condor_logs/
            - name: {{ include "harvester.fullname" . }}-configjson
              mountPath: /opt/harvester/etc/configmap
            - name: {{ include "harvester.fullname" . }}-queueconfig
              mountPath: /opt/harvester/etc/queue_config_mount
            - name: {{ include "harvester.fullname" . }}-sandbox
              mountPath: /opt/harvester/sandbox
            - name: {{ include "harvester.fullname" . }}-auth
              mountPath: /opt/harvester/etc/auth
            - name: {{ include "harvester.fullname" . }}-cric-jsons-volume
               mountPath: /var/cric
          envFrom:
            - configMapRef:
                name: {{ include "harvester.fullname" . }}-env
            - secretRef:
                name: {{ .Values.global.secret }}-harvester-envs
          {{- if .Values.global.deploymentName }}
          env:
            - name: "HARVESTER_ID"
              value: "{{ .Values.global.deploymentName }}"
            - name: "HARVESTER_DB_HOST"
              value: "{{ .Values.global.deploymentName }}-mariadb"
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "harvester.fullname" . }}-configjson
          configMap:
            name: {{ include "harvester.fullname" . }}-configjson
        - name: {{ include "harvester.fullname" . }}-queueconfig
          configMap:
            name: {{ include "harvester.fullname" . }}-queueconfig
        - name: {{ include "harvester.fullname" . }}-sandbox
          configMap:
            name: {{ include "harvester.fullname" . }}-sandbox
        - name: {{ include "harvester.fullname" . }}-auth
          secret:
              secretName: {{ .Values.global.secret }}-harvester-auth
        - name: {{ include "harvester.fullname" . }}-condor-logs
          persistentVolumeClaim:
            claimName: {{ include "harvester.fullname" . }}-condor-logs
        - name: {{ include "harvester.fullname" . }}-cric-jsons-volume
          secret:
              secretName: {{ .Values.global.secret }}-cric-jsons
              optional: true
  {{- if .Values.persistentvolume.create }}
        - name: {{ include "harvester.fullname" . }}-logs
          persistentVolumeClaim:
            claimName: {{ include "harvester.fullname" . }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "harvester.fullname" . }}-logs
      spec:
        storageClassName: {{ .Values.persistentvolume.class }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentvolume.size }}
  {{- end }}
